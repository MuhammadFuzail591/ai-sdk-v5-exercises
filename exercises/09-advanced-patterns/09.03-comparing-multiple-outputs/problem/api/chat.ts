import { google } from '@ai-sdk/google';
import {
  convertToModelMessages,
  createUIMessageStream,
  createUIMessageStreamResponse,
  generateText,
  streamText,
  type AsyncIterableStream,
  type ModelMessage,
  type StreamTextResult,
  type UIMessage,
  type UIMessageStreamWriter,
} from 'ai';

export type MyMessage = UIMessage<
  never,
  {
    // TODO: Declare the data-output type here.
    // We need two properties:
    // - model: string - the name of the model that generated the text
    // - text: string - the text generated by the model
    output: TODO;
  }
>;

const streamModelText = async (opts: {
  textStream: AsyncIterableStream<string>;
  model: string;
  writer: UIMessageStreamWriter<MyMessage>;
}) => {
  // TODO: Stream the text from the textStream to the
  // data-output part
};

export const POST = async (req: Request): Promise<Response> => {
  const body = await req.json();

  const messages: MyMessage[] = body.messages;

  const modelMessages: ModelMessage[] =
    convertToModelMessages(messages);

  const stream = createUIMessageStream<MyMessage>({
    execute: async ({ writer }) => {
      const firstStreamResult = streamText({
        model: google('gemini-2.0-flash-lite'),
        messages: modelMessages,
      });

      const secondStreamResult = streamText({
        model: google('gemini-2.0-flash'),
        messages: modelMessages,
      });

      // TODO: Using Promise.all, call streamModelText for each model
      // and pass in the appropriate model
      await Promise.all(TODO);
    },
  });

  return createUIMessageStreamResponse({
    stream,
  });
};
